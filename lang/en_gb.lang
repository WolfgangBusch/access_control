# addon:access_control
#   package
access_control              = Access Control
access_control_introduction = Introduction
access_control_description  = Description
access_control_details      = Details
#   login page
access_control_login_in_username_pwd = Insert user name and password, please
access_control_login_wrong_username  = +++ wrong user name
access_control_login_in_pwd          = Insert password, please
access_control_login_wrong_pwd       = +++ wrong password
access_control_login_username        = User name
access_control_login_pwd             = Password
access_control_login_button_in       = sign in
access_control_login_button_off      = sign off
access_control_login_val_off         = signoff
access_control_login_user            = User
access_control_login_authenticated   = authenticated successfully
#   documentation help
access_control_help           = This add-on provides access protection for selected areas of articles and/or media files. Access is controlled by authentication of Redaxo users who are assigned the appropriate categories. The authorization granted is stored session-based.<br/>Only a simple rewrite rule is required.<br/>The add-on is fully bilingual (German, English).
#   documentation description
access_control_descr_head1    = Protected areas:
access_control_descr_par1     = Roles for Redaxo users typically select categories and media categories to specify an editor's responsibility (write access) for all articles and media files in their path. In this add-on, appropriately defined categories and top media categories can be interpreted as "protected areas" that visitors only get read access to, after authentication in the front end with name and password of the associated Redaxo user.
access_control_descr_head2    = Guardian user:
access_control_descr_par2     = Redaxo users with such roles can be set up as "guardian users" for their areas. In this way you can specify a category, too, in whose path only the site administrator has read access as a visitor if he has signed in in the backend ("forbidden area").<br/>Unlike editors, a guardian user must be defined as inactive, and the "Description" field must be given the value "Protector", in the case of the guardian for the forbidden area the value "Guardian".<br/>A Redaxo editor has read access to his pages as a visitor if he has signed in in the backend, even if they are located in protected areas.
access_control_descr_head3    = Access authorization check:
access_control_descr_par3     = Whether a requested article is public, protected or forbidden can be determined using an add-on function, reasonably in the page template. If necessary, a hint or a link to a sign-in page can be issued instead of the article content. Checking whether a media file is public or protected is done in the boot file. If there is no access permission, a default error image is displayed instead of the requested media file.
#   documentation details
access_control_details_head1  = Sign-in procedure for guardian users:
access_control_details_par1   = Create a form page that contains only the call to an add-on function for signing in a guardian user. The ID of the respective guardian ($uid) is passed to the page using url parameter "uid=$uid". The function checks the password in encrypted form, stores a session variable in case of success and returns the ID of the guardian.
access_control_details_head2  = Access control on the current page:
access_control_details_par2   = The integer return value of an add-on function allows you to decide whether the current page can be viewed (0) or not (1,2,3,...):
access_control_details_par2a  = =0: the page is public or the visitor is authorized<br/>=1: forbidden area, the visitor has not signed in as site administrator<br/>>1: (= ID of the guardian user of the page) the visitor has not authenticated
access_control_details_par2b  = The following is a schematic PHP code snippet for a page template to display a corresponding note or a link to a sign-in page instead of the article content, if necessary:
access_control_details_head3  = Rewriting of media files:
access_control_details_par3   = In this way, the file in question can be detected in all media references by means of rex_request functions, and the access permission can already be checked in the boot file.
