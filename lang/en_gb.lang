# addon:access_control
#   package
access_control              = Access Control
access_control_introduction = Introduction
access_control_description  = Description
access_control_details      = Details
#
#   sign-in page
access_control_signin_no_protector    = At first define a guardian user, please
access_control_signin_in_username_pwd = Insert user name and password, please
access_control_signin_wrong_username  = +++ wrong user name
access_control_signin_in_pwd          = Insert password, please
access_control_signin_wrong_pwd       = +++ wrong password
access_control_signin_username        = User name
access_control_signin_pwd             = Password
access_control_signin_button_in       = sign in
access_control_signin_button_off      = sign off
access_control_signin_val_off         = signoff
access_control_signin_user            = User
access_control_login_authenticated    = authenticated
#
#   documentation help
access_control_help           = This add-on provides access control for selected areas of articles and/or media files. This means that a visitor in the front end needs authentication to see specific pages or media files. In this way, groups of visitors will be set up, which are delimited from the general public.<br/>Access is controlled by authentication of Redaxo users that are assigned the appropriate areas through their roles.<br/>The authorization granted is stored session-based.The add-on is fully bilingual (German, English).
#
#   documentation description
access_control_descr_head1    = Protected areas:
access_control_descr_par1     = Access control can be set up for any category ("protected area"). The protection then extends to all articles contained in this category and in its subcategories. If necessary, the content-based category tree must be restructured in favour of data protection by moving articles worthy of protection to a protected area.<br/>Similarly, existing or new top media categories can be created as protected areas for media files.<br/>In addition, a category can also be defined as a "prohibited area", if necessary. To this only the site administrator has read access as a visitor, when he has signed in in the backend.
access_control_descr_head2    = Guardian user:
access_control_descr_par2     = The assignment of a protected category or media category to a Redaxo user ("Guardian User") is realized within the framework of Redaxo user management via appropriate roles. A guardian user can be assigned multiple protected areas, both categories and media categories.
access_control_descr_head3    = Access authorization check:
access_control_descr_par3     = Whether a requested article is public, protected or prohibited can be determined using an add-on function, reasonably in the page template. If necessary, a hint or a link to a sign-in page can be issued instead of the article content. Checking whether a media file is public or protected is done in the boot file. If there is no access permission, a default error image is displayed instead of the requested media file.
access_control_descr_head4    = Sign-in page:
access_control_descr_par4     = To access a protected article or media file, a visitor must first register by entering the login name and the associated password of a guardian user. An article with login form can be stored as a single-line PHP code in a suitable place.
#
#   documentation details
access_control_details_head0  = Setting up access control
access_control_details_par0   = The following steps are required, preferably in this order:
access_control_details_head1  = Setting up guardian users via Redaxo user management:
access_control_details_par1a  = A guardian user is created like an editor:
access_control_details_par1b  = He is defined as inactive, so his password can only be changed with admin rights.
access_control_details_par1c  = The "Description" field is given the value "Protector" (or "Guardian" for the prohibited area).
access_control_details_par1d  = He is assigned a role. In this, categories and top media categories are to be selected, which usually define the user's area of responsibility (write access) as editor. Here they are interpreted as protected areas.
access_control_details_par1e  = A guardian user can receive multiple such roles. In this way, it is possible that protected areas overlap and access to categories is controlled by more than one guardian.
access_control_details_par1f  = After the guardian users are set up, the <u> protection mechanism is activated or updated by re-installing the add-on</u>. The associated data is stored in the <u>add-on cache</u> (json encoded).
access_control_details_head2  = Access control on the current page as part of the page template:
access_control_details_par2a  = The return value of the add-on function <code>protected_or_prohibited()</code> allows you to decide whether the current page may be displayed or not:
access_control_details_par2b  = the page is public or the visitor is authorized
access_control_details_par2c  = prohibited area, the visitor has not signed in as the site administrator in the backend
access_control_details_par2d  = ID of the page's guardian user (or a comma-separated list of several IDs, >1 each),<br/>the visitor has not authenticated
access_control_details_par2e  = The following is a schematic PHP code snippet to be included in the page template in order to display a corresponding note or a link to a sign-in page instead of the article content, if necessary:
access_control_details_par2f  = As a visitor, a Redaxo editor has read access to his pages even if they are located in protected areas, in case he has logged in in the backend.
access_control_details_head3  = Access control on media files via .htaccess file:
access_control_details_par3   = The access authorization to the media file is checked in the function <code>control_file($file)</code>, called in the boot file. The check is based on the Media Manager URL. In this way, the file in question can be determined by using the function <tt>rex_get()</tt>. Media URLs of the form <tt>&apos;/media/filename&apos;</tt> must be redirected, accordingly:
access_control_details_head4  = Article with a sign-in procedure for visitors:
access_control_details_par4a  = An article should be generated which contains only the call to the add-on function <code>login_page()</code>. The page displays an input form for user name and password of a guardian user.
access_control_details_par4b  = The sign-in page is called with an URL parameter <tt>uid=$uidlist</tt>. <tt>$uidlist</tt> is a comma-separated list of guardian user IDs such as the return values of function <tt>protected_or_prohibited()</tt>, see above. By means of each of the listed users, the visitor can authenticate himself. An empty or missing parameter corresponds to a list of all guarding users set up.
access_control_details_par4c  = The function checks the login name of the guardian user as well as his password (in encrypted form). If the authentication was successful, it stores the data necessary for access control in a <u>session array</u> and returns the ID of the entered guardian. Otherwise, the imported ID list is returned. The return value can be further processed, if necessary.
access_control_details_par4d  = If a visitor has signed in in this way, a new call to the sign-in page initially only shows a sign-off button. After signing off, a new authentication form is displayed; the URL parameter of the page remains unchanged.
