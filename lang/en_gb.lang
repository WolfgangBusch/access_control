# addon:access_control
#   package
access_control = Access Control
introduction   = Introduction
description    = Description
details        = Details
settings       = Configuration
#
#   access_allowed
ac_allowed_prohibited     = This article is in the <span class="ac_error">prohibited area</span>,<br>reserved for the site administrator.
ac_allowed_access         = Access only after a
ac_allowed_button_title   = Sign-in form
ac_allowed_signin         = Sign-in
ac_allowed_article        = The article
ac_allowed_protected      = is in a <span class="ac_error">protected area</span>
ac_allowed_back           = back
#
#   sign-in page
ac_signin_no_protector    = At first define a guardian user, please
ac_signin_in_username_pwd = Insert user name and password, please
ac_signin_wrong_username  = +++ wrong user name
ac_signin_in_pwd          = Insert password, please
ac_signin_wrong_pwd       = +++ wrong password
ac_signin_username        = User name
ac_signin_pwd             = Password
ac_signin_button_in       = sign in
ac_signin_button_off      = sign off
ac_signin_val_off         = signoff
ac_signin_user            = User
ac_signin_logoff          = After all User
ac_signin_authenticated   = authenticated
ac_signin_reload          = Now please clear the browser cache<br>and reload the page you are accessing!
#
#   documentation help
ac_help           = This add-on provides access control for selected areas of articles and/or media files. This means that a visitor in the front end needs authentication to see specific pages or media files. In this way, groups of visitors will be set up, which are delimited from the general public.<br>Access is controlled by authentication of Redaxo users that are assigned the appropriate areas through their roles.<br>The authorization granted is stored session-based.The add-on is fully bilingual (German, English).
#
#   documentation description
ac_descr_head1    = Protected areas:
ac_descr_par1     = Access control can be set up for any category ("protected area"). The protection then extends to all articles that are in this category and in its subcategories. If necessary, the content-based category tree must be restructured in favour of data protection by moving articles worthy of protection to a protected area.<br>Similarly, existing or new top media categories can be created as protected areas for media files.<br>In addition, a category can also be defined as a "prohibited area", if necessary. To this only the site administrator has read access as a visitor, when he has signed in in the backend.
ac_descr_head2    = Guardian user:
ac_descr_par2     = The assignment of a protected category or media category to a Redaxo user ("Guardian User") is realized within the framework of Redaxo user management via appropriate roles. A guardian user can be assigned multiple protected areas, both categories and media categories.
ac_descr_head3    = Access authorization check:
ac_descr_par3     = Using an add-on function, it is possible to determine whether a requested article is public, protected or prohibited. This is reasonably done in the page template. If necessary, a link to an authentication form will be displayed there instead of the article content.<br>Checking whether a media file is public or protected is done in the boot file. If there is no access permission, a default error image is displayed instead of the requested media file.
ac_descr_head4    = Authentication:
ac_descr_par4     = In order to access a protected article or media file, a visitor must first authenticate by providing the login name and password of the associated guardian user. A corresponding form is available.
#
#   documentation details
ac_details_head0  = Setting up access control
ac_details_par0   = The following steps are required, preferably in this order:
ac_details_head1  = Setting up guardian users via Redaxo user management:
ac_details_par1a  = A guardian user is created like an editor. It must be noted:
ac_details_par1b  = He is defined as inactive, so his password can only be changed with admin rights.
ac_details_par1c  = The "Description" field is given the value "Protector" (or "Guardian" for the prohibited area).
ac_details_par1d  = He is assigned a role. In this, categories and top media categories are to be selected, which usually define the user's area of responsibility (write access) as editor. Here they are interpreted as protected areas.
ac_details_par1e  = A guardian user can receive multiple such roles. In this way, it is possible that protected areas overlap and access to categories is controlled by more than one guardian.
ac_details_par1f  = After the guardian users are set up, the <u> protection mechanism is activated or updated by re-installing the add-on</u>. The associated data is stored in the <u>add-on cache</u> (json encoded).
ac_details_head2  = Access control on the current page as part of the page template:
ac_details_par2a  = The return value of the add-on function <code>protected_or_prohibited()</code> allows you to decide whether the current page may be displayed or not:
ac_details_par2b  = the page is public or the visitor is authorized
ac_details_par2c  = prohibited area, the visitor has not signed in as the site administrator in the backend
ac_details_par2d  = ID of the page's guardian user (or a comma-separated list of several IDs, >1 each),<br>the visitor has not authenticated as the associated guardian user (or one of those users)
ac_details_par2e  = The following is a schematic PHP code snippet for the page template using the add-on function <code>access_allowed($uid).</code> Instead of the page content, it displays a note and a link to a sign-in form. During installation, a corresponding PHP script is stored in the home directory
ac_details_par2f  = As a visitor, a Redaxo editor has read access to his pages even if they are located in protected areas, in case he has signed in in the backend.
ac_details_head3  = Access control on media files via .htaccess file:
ac_details_par3   = The access authorization to the media file is checked in the function <code>control_file($mediatype,$file)</code>, called in the boot file. The check is based on the Media Manager URL. In this way, the file in question and its media type can be determined by using the function <tt>rex_get()</tt>. Media URLs of the form <tt>&apos;/media/filename&apos;</tt> must be redirected, accordingly: