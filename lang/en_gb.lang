# addon:access_control
#   package
access_control              = Access Control
access_control_introduction = Introduction
access_control_description  = Description
access_control_details      = Details
#   login page
access_control_login_in_username_pwd = Insert user name and password, please
access_control_login_wrong_username  = +++ wrong user name
access_control_login_in_pwd          = Insert password, please
access_control_login_wrong_pwd       = +++ wrong password
access_control_login_username        = User name
access_control_login_pwd             = Password
access_control_login_button_in       = sign in
access_control_login_button_off      = sign off
access_control_login_val_off         = signoff
access_control_login_user            = User
access_control_login_authenticated   = authenticated successfully
#   documentation help
access_control_help           = This add-on provides access protection for selected areas of articles and/or media files. Access is controlled by authentication of Redaxo users who are assigned the appropriate categories through their roles. The authorization granted is stored session-based.<br/>Only a simple rewrite rule is required.<br/>The add-on is fully bilingual (German, English).
#   documentation description
access_control_descr_head1    = Protected areas:
access_control_descr_par1     = Roles for Redaxo users typically select categories and media categories to specify an editor's responsibility (write access) for all articles and media files in their path. In this add-on, appropriately defined categories and top media categories are interpreted as "protected areas" with all the articles or files in the path below. Visitors will only gain read access to these areas after authentication in the front end with the name and password of the associated Redaxo user.
access_control_descr_head2    = Guardian user:
access_control_descr_par2     = Redaxo users with such roles can be set up as "guardian users" for their areas. In this way you can specify a category, too, in whose path only the site administrator has read access as a visitor if he has signed in in the backend ("forbidden area"). A Redaxo editor has read access to his pages if he has signed in in the backend, even if they are located in protected areas.
access_control_descr_head3    = Access authorization check:
access_control_descr_par3     = Whether a requested article is public, protected or forbidden can be determined using an add-on function, reasonably in the page template. If necessary, a hint or a link to a sign-in page can be issued instead of the article content. Checking whether a media file is public or protected is done in the boot file. If there is no access permission, a default error image is displayed instead of the requested media file.
#   documentation details
access_control_details_head1  = Setting up a guardian user:
access_control_details_par1a  = A guardian user is created like an editor in the user management:
access_control_details_par1b  = He is defined as inactive, so his password can only be changed with admin rights.<br/>The "Description" field is given the value "Protector" (or "Guardian" for the forbidden area).<br/>He gets a role that sets his categories and top media categories.
access_control_details_par1c  = A guardian user can receive multiple such roles. In this way, it is possible that protected areas overlap and access to categories is controlled by more than one guardian.
access_control_details_par1d  = After the guardian users are set up, the <u> protection mechanism is activated or updated by re-installing the addon</u>. The associated <u> data is stored in the add-on cache</u> (json encoded).<br/>Any deletion of the Redaxo cache (such as in the system settings) also requires a re-installation of the add-on.
access_control_details_head2  = Access control on the current page:
access_control_details_par2a  = The integer return value of the add-on function <code>protected_or_forbidden()</code> allows you to decide whether the current page can be viewed (0) or not (1,2,3,...):
access_control_details_par2b  = =0: the page is public or the visitor is authorized<br/>=1: forbidden area, the visitor has not signed in as site administrator in the backend<br/>>1: (= comma-separated list of the guardian users of the page) the visitor has not authenticated
access_control_details_par2c  = The following is a schematic PHP code snippet for a page template to display a corresponding note or a link to a sign-in page instead of the article content, if necessary:
access_control_details_head3  = Sign-in procedure for guardian users:
access_control_details_par3a  = An article should be generated which contains only the call to the add-on function <code>login_page()</code>. It displays a registration form for one or more of the responsible guardian users (see above).
access_control_details_par3b  = The guardians ids consist of a comma-separated list and are passed to the page using URL parameters "uid=$uid". The function checks the password for the entered guard user in encrypted form and, if successful, stores the data necessary for access control in a session array. The return value of the function does not need to be further evaluated (Id of the entered guardian in case of success, otherwise the read id list).
access_control_details_par4   = In this way, the file in question can be detected in all media references by means of rex_request functions, and the access permission can already be checked in the boot file.
